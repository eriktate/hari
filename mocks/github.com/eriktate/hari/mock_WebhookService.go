// Code generated by mockery v2.42.1. DO NOT EDIT.

package hari

import (
	context "context"

	hari "github.com/eriktate/hari"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// MockWebhookService is an autogenerated mock type for the WebhookService type
type MockWebhookService struct {
	mock.Mock
}

// CreateWebhook provides a mock function with given fields: ctx, webhook
func (_m *MockWebhookService) CreateWebhook(ctx context.Context, webhook hari.NewWebhook) (uuid.NullUUID, error) {
	ret := _m.Called(ctx, webhook)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebhook")
	}

	var r0 uuid.NullUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, hari.NewWebhook) (uuid.NullUUID, error)); ok {
		return rf(ctx, webhook)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hari.NewWebhook) uuid.NullUUID); ok {
		r0 = rf(ctx, webhook)
	} else {
		r0 = ret.Get(0).(uuid.NullUUID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, hari.NewWebhook) error); ok {
		r1 = rf(ctx, webhook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebhook provides a mock function with given fields: ctx, id
func (_m *MockWebhookService) DeleteWebhook(ctx context.Context, id uuid.NullUUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.NullUUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWebhook provides a mock function with given fields: ctx, id
func (_m *MockWebhookService) GetWebhook(ctx context.Context, id uuid.NullUUID) (hari.Webhook, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWebhook")
	}

	var r0 hari.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.NullUUID) (hari.Webhook, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.NullUUID) hari.Webhook); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(hari.Webhook)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.NullUUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryWebhooks provides a mock function with given fields: ctx, query
func (_m *MockWebhookService) QueryWebhooks(ctx context.Context, query hari.WebhookQuery) ([]hari.Webhook, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for QueryWebhooks")
	}

	var r0 []hari.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, hari.WebhookQuery) ([]hari.Webhook, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hari.WebhookQuery) []hari.Webhook); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hari.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, hari.WebhookQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebhook provides a mock function with given fields: ctx, updates
func (_m *MockWebhookService) UpdateWebhook(ctx context.Context, updates hari.WebhookUpdates) error {
	ret := _m.Called(ctx, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hari.WebhookUpdates) error); ok {
		r0 = rf(ctx, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWebhookService creates a new instance of MockWebhookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebhookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebhookService {
	mock := &MockWebhookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
